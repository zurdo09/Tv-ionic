(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('angularfire2')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', 'angularfire2'], factory) :
    (factory((global.angularfire2 = global.angularfire2 || {}, global.angularfire2.messaging = {}),global.ng.core,global.ng.common,global.rxjs,global.rxjs.operators,global.angularfire2));
}(this, (function (exports,core,common,rxjs,operators,angularfire2) { 'use strict';

    var AngularFireMessaging = (function () {
        function AngularFireMessaging(options, nameOrConfig, platformId, zone) {
            var _this = this;
            if (common.isPlatformBrowser(platformId)) {
                var requireMessaging = rxjs.from(import('firebase/messaging'));
                this.messaging = requireMessaging.pipe(operators.map(function () { return angularfire2._firebaseAppFactory(options, nameOrConfig); }), operators.map(function (app) { return app.messaging(); }), angularfire2.runOutsideAngular(zone));
                this.requestPermission = this.messaging.pipe(operators.switchMap(function (messaging) { return messaging.requestPermission(); }), angularfire2.runOutsideAngular(zone));
            }
            else {
                this.messaging = rxjs.empty();
                this.requestPermission = rxjs.throwError('Not available on server platform.');
            }
            this.getToken = this.messaging.pipe(operators.switchMap(function (messaging) { return messaging.getToken(); }), operators.defaultIfEmpty(null), angularfire2.runOutsideAngular(zone));
            var tokenChanges = this.messaging.pipe(operators.switchMap(function (messaging) { return new rxjs.Observable(messaging.onTokenRefresh); }), angularfire2.runOutsideAngular(zone));
            this.tokenChanges = this.getToken.pipe(operators.concat(tokenChanges));
            this.messages = this.messaging.pipe(operators.switchMap(function (messaging) { return new rxjs.Observable(messaging.onMessage); }), angularfire2.runOutsideAngular(zone));
            this.requestToken = this.requestPermission.pipe(operators.catchError(function () { return rxjs.of(null); }), operators.mergeMap(function () { return _this.tokenChanges; }));
            this.deleteToken = function (token) { return _this.messaging.pipe(operators.switchMap(function (messaging) { return messaging.deleteToken(token); }), operators.defaultIfEmpty(false), angularfire2.runOutsideAngular(zone)); };
        }
        AngularFireMessaging.decorators = [
            { type: core.Injectable },
        ];
        AngularFireMessaging.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [angularfire2.FirebaseOptionsToken,] }] },
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [angularfire2.FirebaseNameOrConfigToken,] }] },
            { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
            { type: core.NgZone }
        ]; };
        return AngularFireMessaging;
    }());

    var AngularFireMessagingModule = (function () {
        function AngularFireMessagingModule() {
        }
        AngularFireMessagingModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [AngularFireMessaging]
                    },] },
        ];
        return AngularFireMessagingModule;
    }());

    exports.AngularFireMessaging = AngularFireMessaging;
    exports.AngularFireMessagingModule = AngularFireMessagingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
